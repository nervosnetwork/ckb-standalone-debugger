// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `profile.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Profile {
    // message fields
    pub sample_type: ::protobuf::RepeatedField<ValueType>,
    pub sample: ::protobuf::RepeatedField<Sample>,
    pub mapping: ::protobuf::RepeatedField<Mapping>,
    pub location: ::protobuf::RepeatedField<Location>,
    pub function: ::protobuf::RepeatedField<Function>,
    pub string_table: ::protobuf::RepeatedField<::std::string::String>,
    pub drop_frames: i64,
    pub keep_frames: i64,
    pub time_nanos: i64,
    pub duration_nanos: i64,
    pub period_type: ::protobuf::SingularPtrField<ValueType>,
    pub period: i64,
    pub comment: ::std::vec::Vec<i64>,
    pub default_sample_type: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Profile {
    fn default() -> &'a Profile {
        <Profile as ::protobuf::Message>::default_instance()
    }
}

impl Profile {
    pub fn new() -> Profile {
        ::std::default::Default::default()
    }

    // repeated .perftools.profiles.ValueType sample_type = 1;


    pub fn get_sample_type(&self) -> &[ValueType] {
        &self.sample_type
    }
    pub fn clear_sample_type(&mut self) {
        self.sample_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_sample_type(&mut self, v: ::protobuf::RepeatedField<ValueType>) {
        self.sample_type = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sample_type(&mut self) -> &mut ::protobuf::RepeatedField<ValueType> {
        &mut self.sample_type
    }

    // Take field
    pub fn take_sample_type(&mut self) -> ::protobuf::RepeatedField<ValueType> {
        ::std::mem::replace(&mut self.sample_type, ::protobuf::RepeatedField::new())
    }

    // repeated .perftools.profiles.Sample sample = 2;


    pub fn get_sample(&self) -> &[Sample] {
        &self.sample
    }
    pub fn clear_sample(&mut self) {
        self.sample.clear();
    }

    // Param is passed by value, moved
    pub fn set_sample(&mut self, v: ::protobuf::RepeatedField<Sample>) {
        self.sample = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sample(&mut self) -> &mut ::protobuf::RepeatedField<Sample> {
        &mut self.sample
    }

    // Take field
    pub fn take_sample(&mut self) -> ::protobuf::RepeatedField<Sample> {
        ::std::mem::replace(&mut self.sample, ::protobuf::RepeatedField::new())
    }

    // repeated .perftools.profiles.Mapping mapping = 3;


    pub fn get_mapping(&self) -> &[Mapping] {
        &self.mapping
    }
    pub fn clear_mapping(&mut self) {
        self.mapping.clear();
    }

    // Param is passed by value, moved
    pub fn set_mapping(&mut self, v: ::protobuf::RepeatedField<Mapping>) {
        self.mapping = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mapping(&mut self) -> &mut ::protobuf::RepeatedField<Mapping> {
        &mut self.mapping
    }

    // Take field
    pub fn take_mapping(&mut self) -> ::protobuf::RepeatedField<Mapping> {
        ::std::mem::replace(&mut self.mapping, ::protobuf::RepeatedField::new())
    }

    // repeated .perftools.profiles.Location location = 4;


    pub fn get_location(&self) -> &[Location] {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::protobuf::RepeatedField<Location>) {
        self.location = v;
    }

    // Mutable pointer to the field.
    pub fn mut_location(&mut self) -> &mut ::protobuf::RepeatedField<Location> {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::protobuf::RepeatedField<Location> {
        ::std::mem::replace(&mut self.location, ::protobuf::RepeatedField::new())
    }

    // repeated .perftools.profiles.Function function = 5;


    pub fn get_function(&self) -> &[Function] {
        &self.function
    }
    pub fn clear_function(&mut self) {
        self.function.clear();
    }

    // Param is passed by value, moved
    pub fn set_function(&mut self, v: ::protobuf::RepeatedField<Function>) {
        self.function = v;
    }

    // Mutable pointer to the field.
    pub fn mut_function(&mut self) -> &mut ::protobuf::RepeatedField<Function> {
        &mut self.function
    }

    // Take field
    pub fn take_function(&mut self) -> ::protobuf::RepeatedField<Function> {
        ::std::mem::replace(&mut self.function, ::protobuf::RepeatedField::new())
    }

    // repeated string string_table = 6;


    pub fn get_string_table(&self) -> &[::std::string::String] {
        &self.string_table
    }
    pub fn clear_string_table(&mut self) {
        self.string_table.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_table(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.string_table = v;
    }

    // Mutable pointer to the field.
    pub fn mut_string_table(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.string_table
    }

    // Take field
    pub fn take_string_table(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.string_table, ::protobuf::RepeatedField::new())
    }

    // int64 drop_frames = 7;


    pub fn get_drop_frames(&self) -> i64 {
        self.drop_frames
    }
    pub fn clear_drop_frames(&mut self) {
        self.drop_frames = 0;
    }

    // Param is passed by value, moved
    pub fn set_drop_frames(&mut self, v: i64) {
        self.drop_frames = v;
    }

    // int64 keep_frames = 8;


    pub fn get_keep_frames(&self) -> i64 {
        self.keep_frames
    }
    pub fn clear_keep_frames(&mut self) {
        self.keep_frames = 0;
    }

    // Param is passed by value, moved
    pub fn set_keep_frames(&mut self, v: i64) {
        self.keep_frames = v;
    }

    // int64 time_nanos = 9;


    pub fn get_time_nanos(&self) -> i64 {
        self.time_nanos
    }
    pub fn clear_time_nanos(&mut self) {
        self.time_nanos = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_nanos(&mut self, v: i64) {
        self.time_nanos = v;
    }

    // int64 duration_nanos = 10;


    pub fn get_duration_nanos(&self) -> i64 {
        self.duration_nanos
    }
    pub fn clear_duration_nanos(&mut self) {
        self.duration_nanos = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration_nanos(&mut self, v: i64) {
        self.duration_nanos = v;
    }

    // .perftools.profiles.ValueType period_type = 11;


    pub fn get_period_type(&self) -> &ValueType {
        self.period_type.as_ref().unwrap_or_else(|| <ValueType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_period_type(&mut self) {
        self.period_type.clear();
    }

    pub fn has_period_type(&self) -> bool {
        self.period_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_period_type(&mut self, v: ValueType) {
        self.period_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_period_type(&mut self) -> &mut ValueType {
        if self.period_type.is_none() {
            self.period_type.set_default();
        }
        self.period_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_period_type(&mut self) -> ValueType {
        self.period_type.take().unwrap_or_else(|| ValueType::new())
    }

    // int64 period = 12;


    pub fn get_period(&self) -> i64 {
        self.period
    }
    pub fn clear_period(&mut self) {
        self.period = 0;
    }

    // Param is passed by value, moved
    pub fn set_period(&mut self, v: i64) {
        self.period = v;
    }

    // repeated int64 comment = 13;


    pub fn get_comment(&self) -> &[i64] {
        &self.comment
    }
    pub fn clear_comment(&mut self) {
        self.comment.clear();
    }

    // Param is passed by value, moved
    pub fn set_comment(&mut self, v: ::std::vec::Vec<i64>) {
        self.comment = v;
    }

    // Mutable pointer to the field.
    pub fn mut_comment(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.comment
    }

    // Take field
    pub fn take_comment(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.comment, ::std::vec::Vec::new())
    }

    // int64 default_sample_type = 14;


    pub fn get_default_sample_type(&self) -> i64 {
        self.default_sample_type
    }
    pub fn clear_default_sample_type(&mut self) {
        self.default_sample_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_default_sample_type(&mut self, v: i64) {
        self.default_sample_type = v;
    }
}

impl ::protobuf::Message for Profile {
    fn is_initialized(&self) -> bool {
        for v in &self.sample_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sample {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.mapping {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.function {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.period_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sample_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sample)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mapping)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.location)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.function)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.string_table)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.drop_frames = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.keep_frames = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time_nanos = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.duration_nanos = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.period_type)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.period = tmp;
                },
                13 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.comment)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.default_sample_type = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sample_type {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.sample {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.mapping {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.location {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.function {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.string_table {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if self.drop_frames != 0 {
            my_size += ::protobuf::rt::value_size(7, self.drop_frames, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.keep_frames != 0 {
            my_size += ::protobuf::rt::value_size(8, self.keep_frames, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time_nanos != 0 {
            my_size += ::protobuf::rt::value_size(9, self.time_nanos, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.duration_nanos != 0 {
            my_size += ::protobuf::rt::value_size(10, self.duration_nanos, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.period_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.period != 0 {
            my_size += ::protobuf::rt::value_size(12, self.period, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.comment {
            my_size += ::protobuf::rt::value_size(13, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.default_sample_type != 0 {
            my_size += ::protobuf::rt::value_size(14, self.default_sample_type, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sample_type {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.sample {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.mapping {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.location {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.function {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.string_table {
            os.write_string(6, &v)?;
        };
        if self.drop_frames != 0 {
            os.write_int64(7, self.drop_frames)?;
        }
        if self.keep_frames != 0 {
            os.write_int64(8, self.keep_frames)?;
        }
        if self.time_nanos != 0 {
            os.write_int64(9, self.time_nanos)?;
        }
        if self.duration_nanos != 0 {
            os.write_int64(10, self.duration_nanos)?;
        }
        if let Some(ref v) = self.period_type.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.period != 0 {
            os.write_int64(12, self.period)?;
        }
        for v in &self.comment {
            os.write_int64(13, *v)?;
        };
        if self.default_sample_type != 0 {
            os.write_int64(14, self.default_sample_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Profile {
        Profile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValueType>>(
                "sample_type",
                |m: &Profile| { &m.sample_type },
                |m: &mut Profile| { &mut m.sample_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Sample>>(
                "sample",
                |m: &Profile| { &m.sample },
                |m: &mut Profile| { &mut m.sample },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Mapping>>(
                "mapping",
                |m: &Profile| { &m.mapping },
                |m: &mut Profile| { &mut m.mapping },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Location>>(
                "location",
                |m: &Profile| { &m.location },
                |m: &mut Profile| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Function>>(
                "function",
                |m: &Profile| { &m.function },
                |m: &mut Profile| { &mut m.function },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "string_table",
                |m: &Profile| { &m.string_table },
                |m: &mut Profile| { &mut m.string_table },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "drop_frames",
                |m: &Profile| { &m.drop_frames },
                |m: &mut Profile| { &mut m.drop_frames },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "keep_frames",
                |m: &Profile| { &m.keep_frames },
                |m: &mut Profile| { &mut m.keep_frames },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "time_nanos",
                |m: &Profile| { &m.time_nanos },
                |m: &mut Profile| { &mut m.time_nanos },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "duration_nanos",
                |m: &Profile| { &m.duration_nanos },
                |m: &mut Profile| { &mut m.duration_nanos },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValueType>>(
                "period_type",
                |m: &Profile| { &m.period_type },
                |m: &mut Profile| { &mut m.period_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "period",
                |m: &Profile| { &m.period },
                |m: &mut Profile| { &mut m.period },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "comment",
                |m: &Profile| { &m.comment },
                |m: &mut Profile| { &mut m.comment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "default_sample_type",
                |m: &Profile| { &m.default_sample_type },
                |m: &mut Profile| { &mut m.default_sample_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Profile>(
                "Profile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Profile {
        static instance: ::protobuf::rt::LazyV2<Profile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Profile::new)
    }
}

impl ::protobuf::Clear for Profile {
    fn clear(&mut self) {
        self.sample_type.clear();
        self.sample.clear();
        self.mapping.clear();
        self.location.clear();
        self.function.clear();
        self.string_table.clear();
        self.drop_frames = 0;
        self.keep_frames = 0;
        self.time_nanos = 0;
        self.duration_nanos = 0;
        self.period_type.clear();
        self.period = 0;
        self.comment.clear();
        self.default_sample_type = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Profile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Profile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValueType {
    // message fields
    pub field_type: i64,
    pub unit: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValueType {
    fn default() -> &'a ValueType {
        <ValueType as ::protobuf::Message>::default_instance()
    }
}

impl ValueType {
    pub fn new() -> ValueType {
        ::std::default::Default::default()
    }

    // int64 type = 1;


    pub fn get_field_type(&self) -> i64 {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: i64) {
        self.field_type = v;
    }

    // int64 unit = 2;


    pub fn get_unit(&self) -> i64 {
        self.unit
    }
    pub fn clear_unit(&mut self) {
        self.unit = 0;
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: i64) {
        self.unit = v;
    }
}

impl ::protobuf::Message for ValueType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.field_type = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.unit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.field_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.unit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.unit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != 0 {
            os.write_int64(1, self.field_type)?;
        }
        if self.unit != 0 {
            os.write_int64(2, self.unit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValueType {
        ValueType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "type",
                |m: &ValueType| { &m.field_type },
                |m: &mut ValueType| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "unit",
                |m: &ValueType| { &m.unit },
                |m: &mut ValueType| { &mut m.unit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValueType>(
                "ValueType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValueType {
        static instance: ::protobuf::rt::LazyV2<ValueType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValueType::new)
    }
}

impl ::protobuf::Clear for ValueType {
    fn clear(&mut self) {
        self.field_type = 0;
        self.unit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValueType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Sample {
    // message fields
    pub location_id: ::std::vec::Vec<u64>,
    pub value: ::std::vec::Vec<i64>,
    pub label: ::protobuf::RepeatedField<Label>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sample {
    fn default() -> &'a Sample {
        <Sample as ::protobuf::Message>::default_instance()
    }
}

impl Sample {
    pub fn new() -> Sample {
        ::std::default::Default::default()
    }

    // repeated uint64 location_id = 1;


    pub fn get_location_id(&self) -> &[u64] {
        &self.location_id
    }
    pub fn clear_location_id(&mut self) {
        self.location_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_location_id(&mut self, v: ::std::vec::Vec<u64>) {
        self.location_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_location_id(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.location_id
    }

    // Take field
    pub fn take_location_id(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.location_id, ::std::vec::Vec::new())
    }

    // repeated int64 value = 2;


    pub fn get_value(&self) -> &[i64] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<i64>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    // repeated .perftools.profiles.Label label = 3;


    pub fn get_label(&self) -> &[Label] {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::protobuf::RepeatedField<Label>) {
        self.label = v;
    }

    // Mutable pointer to the field.
    pub fn mut_label(&mut self) -> &mut ::protobuf::RepeatedField<Label> {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::protobuf::RepeatedField<Label> {
        ::std::mem::replace(&mut self.label, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Sample {
    fn is_initialized(&self) -> bool {
        for v in &self.label {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.location_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.label)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.location_id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.value {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.label {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.location_id {
            os.write_uint64(1, *v)?;
        };
        for v in &self.value {
            os.write_int64(2, *v)?;
        };
        for v in &self.label {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sample {
        Sample::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "location_id",
                |m: &Sample| { &m.location_id },
                |m: &mut Sample| { &mut m.location_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "value",
                |m: &Sample| { &m.value },
                |m: &mut Sample| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Label>>(
                "label",
                |m: &Sample| { &m.label },
                |m: &mut Sample| { &mut m.label },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Sample>(
                "Sample",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Sample {
        static instance: ::protobuf::rt::LazyV2<Sample> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Sample::new)
    }
}

impl ::protobuf::Clear for Sample {
    fn clear(&mut self) {
        self.location_id.clear();
        self.value.clear();
        self.label.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sample {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Label {
    // message fields
    pub key: i64,
    pub str: i64,
    pub num: i64,
    pub num_unit: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Label {
    fn default() -> &'a Label {
        <Label as ::protobuf::Message>::default_instance()
    }
}

impl Label {
    pub fn new() -> Label {
        ::std::default::Default::default()
    }

    // int64 key = 1;


    pub fn get_key(&self) -> i64 {
        self.key
    }
    pub fn clear_key(&mut self) {
        self.key = 0;
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: i64) {
        self.key = v;
    }

    // int64 str = 2;


    pub fn get_str(&self) -> i64 {
        self.str
    }
    pub fn clear_str(&mut self) {
        self.str = 0;
    }

    // Param is passed by value, moved
    pub fn set_str(&mut self, v: i64) {
        self.str = v;
    }

    // int64 num = 3;


    pub fn get_num(&self) -> i64 {
        self.num
    }
    pub fn clear_num(&mut self) {
        self.num = 0;
    }

    // Param is passed by value, moved
    pub fn set_num(&mut self, v: i64) {
        self.num = v;
    }

    // int64 num_unit = 4;


    pub fn get_num_unit(&self) -> i64 {
        self.num_unit
    }
    pub fn clear_num_unit(&mut self) {
        self.num_unit = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_unit(&mut self, v: i64) {
        self.num_unit = v;
    }
}

impl ::protobuf::Message for Label {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.key = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.str = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.num = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.num_unit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.key != 0 {
            my_size += ::protobuf::rt::value_size(1, self.key, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.str != 0 {
            my_size += ::protobuf::rt::value_size(2, self.str, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num != 0 {
            my_size += ::protobuf::rt::value_size(3, self.num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_unit != 0 {
            my_size += ::protobuf::rt::value_size(4, self.num_unit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.key != 0 {
            os.write_int64(1, self.key)?;
        }
        if self.str != 0 {
            os.write_int64(2, self.str)?;
        }
        if self.num != 0 {
            os.write_int64(3, self.num)?;
        }
        if self.num_unit != 0 {
            os.write_int64(4, self.num_unit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Label {
        Label::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "key",
                |m: &Label| { &m.key },
                |m: &mut Label| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "str",
                |m: &Label| { &m.str },
                |m: &mut Label| { &mut m.str },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "num",
                |m: &Label| { &m.num },
                |m: &mut Label| { &mut m.num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "num_unit",
                |m: &Label| { &m.num_unit },
                |m: &mut Label| { &mut m.num_unit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Label>(
                "Label",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Label {
        static instance: ::protobuf::rt::LazyV2<Label> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Label::new)
    }
}

impl ::protobuf::Clear for Label {
    fn clear(&mut self) {
        self.key = 0;
        self.str = 0;
        self.num = 0;
        self.num_unit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Label {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Label {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Mapping {
    // message fields
    pub id: u64,
    pub memory_start: u64,
    pub memory_limit: u64,
    pub file_offset: u64,
    pub filename: i64,
    pub build_id: i64,
    pub has_functions: bool,
    pub has_filenames: bool,
    pub has_line_numbers: bool,
    pub has_inline_frames: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Mapping {
    fn default() -> &'a Mapping {
        <Mapping as ::protobuf::Message>::default_instance()
    }
}

impl Mapping {
    pub fn new() -> Mapping {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // uint64 memory_start = 2;


    pub fn get_memory_start(&self) -> u64 {
        self.memory_start
    }
    pub fn clear_memory_start(&mut self) {
        self.memory_start = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_start(&mut self, v: u64) {
        self.memory_start = v;
    }

    // uint64 memory_limit = 3;


    pub fn get_memory_limit(&self) -> u64 {
        self.memory_limit
    }
    pub fn clear_memory_limit(&mut self) {
        self.memory_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_limit(&mut self, v: u64) {
        self.memory_limit = v;
    }

    // uint64 file_offset = 4;


    pub fn get_file_offset(&self) -> u64 {
        self.file_offset
    }
    pub fn clear_file_offset(&mut self) {
        self.file_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_file_offset(&mut self, v: u64) {
        self.file_offset = v;
    }

    // int64 filename = 5;


    pub fn get_filename(&self) -> i64 {
        self.filename
    }
    pub fn clear_filename(&mut self) {
        self.filename = 0;
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: i64) {
        self.filename = v;
    }

    // int64 build_id = 6;


    pub fn get_build_id(&self) -> i64 {
        self.build_id
    }
    pub fn clear_build_id(&mut self) {
        self.build_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_build_id(&mut self, v: i64) {
        self.build_id = v;
    }

    // bool has_functions = 7;


    pub fn get_has_functions(&self) -> bool {
        self.has_functions
    }
    pub fn clear_has_functions(&mut self) {
        self.has_functions = false;
    }

    // Param is passed by value, moved
    pub fn set_has_functions(&mut self, v: bool) {
        self.has_functions = v;
    }

    // bool has_filenames = 8;


    pub fn get_has_filenames(&self) -> bool {
        self.has_filenames
    }
    pub fn clear_has_filenames(&mut self) {
        self.has_filenames = false;
    }

    // Param is passed by value, moved
    pub fn set_has_filenames(&mut self, v: bool) {
        self.has_filenames = v;
    }

    // bool has_line_numbers = 9;


    pub fn get_has_line_numbers(&self) -> bool {
        self.has_line_numbers
    }
    pub fn clear_has_line_numbers(&mut self) {
        self.has_line_numbers = false;
    }

    // Param is passed by value, moved
    pub fn set_has_line_numbers(&mut self, v: bool) {
        self.has_line_numbers = v;
    }

    // bool has_inline_frames = 10;


    pub fn get_has_inline_frames(&self) -> bool {
        self.has_inline_frames
    }
    pub fn clear_has_inline_frames(&mut self) {
        self.has_inline_frames = false;
    }

    // Param is passed by value, moved
    pub fn set_has_inline_frames(&mut self, v: bool) {
        self.has_inline_frames = v;
    }
}

impl ::protobuf::Message for Mapping {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.memory_start = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.memory_limit = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.file_offset = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.filename = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.build_id = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_functions = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_filenames = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_line_numbers = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_inline_frames = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_start != 0 {
            my_size += ::protobuf::rt::value_size(2, self.memory_start, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_limit != 0 {
            my_size += ::protobuf::rt::value_size(3, self.memory_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.file_offset != 0 {
            my_size += ::protobuf::rt::value_size(4, self.file_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.filename != 0 {
            my_size += ::protobuf::rt::value_size(5, self.filename, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.build_id != 0 {
            my_size += ::protobuf::rt::value_size(6, self.build_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.has_functions != false {
            my_size += 2;
        }
        if self.has_filenames != false {
            my_size += 2;
        }
        if self.has_line_numbers != false {
            my_size += 2;
        }
        if self.has_inline_frames != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.memory_start != 0 {
            os.write_uint64(2, self.memory_start)?;
        }
        if self.memory_limit != 0 {
            os.write_uint64(3, self.memory_limit)?;
        }
        if self.file_offset != 0 {
            os.write_uint64(4, self.file_offset)?;
        }
        if self.filename != 0 {
            os.write_int64(5, self.filename)?;
        }
        if self.build_id != 0 {
            os.write_int64(6, self.build_id)?;
        }
        if self.has_functions != false {
            os.write_bool(7, self.has_functions)?;
        }
        if self.has_filenames != false {
            os.write_bool(8, self.has_filenames)?;
        }
        if self.has_line_numbers != false {
            os.write_bool(9, self.has_line_numbers)?;
        }
        if self.has_inline_frames != false {
            os.write_bool(10, self.has_inline_frames)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Mapping {
        Mapping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &Mapping| { &m.id },
                |m: &mut Mapping| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "memory_start",
                |m: &Mapping| { &m.memory_start },
                |m: &mut Mapping| { &mut m.memory_start },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "memory_limit",
                |m: &Mapping| { &m.memory_limit },
                |m: &mut Mapping| { &mut m.memory_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "file_offset",
                |m: &Mapping| { &m.file_offset },
                |m: &mut Mapping| { &mut m.file_offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "filename",
                |m: &Mapping| { &m.filename },
                |m: &mut Mapping| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "build_id",
                |m: &Mapping| { &m.build_id },
                |m: &mut Mapping| { &mut m.build_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has_functions",
                |m: &Mapping| { &m.has_functions },
                |m: &mut Mapping| { &mut m.has_functions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has_filenames",
                |m: &Mapping| { &m.has_filenames },
                |m: &mut Mapping| { &mut m.has_filenames },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has_line_numbers",
                |m: &Mapping| { &m.has_line_numbers },
                |m: &mut Mapping| { &mut m.has_line_numbers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has_inline_frames",
                |m: &Mapping| { &m.has_inline_frames },
                |m: &mut Mapping| { &mut m.has_inline_frames },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Mapping>(
                "Mapping",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Mapping {
        static instance: ::protobuf::rt::LazyV2<Mapping> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Mapping::new)
    }
}

impl ::protobuf::Clear for Mapping {
    fn clear(&mut self) {
        self.id = 0;
        self.memory_start = 0;
        self.memory_limit = 0;
        self.file_offset = 0;
        self.filename = 0;
        self.build_id = 0;
        self.has_functions = false;
        self.has_filenames = false;
        self.has_line_numbers = false;
        self.has_inline_frames = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Mapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Mapping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Location {
    // message fields
    pub id: u64,
    pub mapping_id: u64,
    pub address: u64,
    pub line: ::protobuf::RepeatedField<Line>,
    pub is_folded: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Location {
    fn default() -> &'a Location {
        <Location as ::protobuf::Message>::default_instance()
    }
}

impl Location {
    pub fn new() -> Location {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // uint64 mapping_id = 2;


    pub fn get_mapping_id(&self) -> u64 {
        self.mapping_id
    }
    pub fn clear_mapping_id(&mut self) {
        self.mapping_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_mapping_id(&mut self, v: u64) {
        self.mapping_id = v;
    }

    // uint64 address = 3;


    pub fn get_address(&self) -> u64 {
        self.address
    }
    pub fn clear_address(&mut self) {
        self.address = 0;
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u64) {
        self.address = v;
    }

    // repeated .perftools.profiles.Line line = 4;


    pub fn get_line(&self) -> &[Line] {
        &self.line
    }
    pub fn clear_line(&mut self) {
        self.line.clear();
    }

    // Param is passed by value, moved
    pub fn set_line(&mut self, v: ::protobuf::RepeatedField<Line>) {
        self.line = v;
    }

    // Mutable pointer to the field.
    pub fn mut_line(&mut self) -> &mut ::protobuf::RepeatedField<Line> {
        &mut self.line
    }

    // Take field
    pub fn take_line(&mut self) -> ::protobuf::RepeatedField<Line> {
        ::std::mem::replace(&mut self.line, ::protobuf::RepeatedField::new())
    }

    // bool is_folded = 5;


    pub fn get_is_folded(&self) -> bool {
        self.is_folded
    }
    pub fn clear_is_folded(&mut self) {
        self.is_folded = false;
    }

    // Param is passed by value, moved
    pub fn set_is_folded(&mut self, v: bool) {
        self.is_folded = v;
    }
}

impl ::protobuf::Message for Location {
    fn is_initialized(&self) -> bool {
        for v in &self.line {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.mapping_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.address = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.line)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_folded = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mapping_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mapping_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.address != 0 {
            my_size += ::protobuf::rt::value_size(3, self.address, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.line {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.is_folded != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.mapping_id != 0 {
            os.write_uint64(2, self.mapping_id)?;
        }
        if self.address != 0 {
            os.write_uint64(3, self.address)?;
        }
        for v in &self.line {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.is_folded != false {
            os.write_bool(5, self.is_folded)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Location {
        Location::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &Location| { &m.id },
                |m: &mut Location| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "mapping_id",
                |m: &Location| { &m.mapping_id },
                |m: &mut Location| { &mut m.mapping_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "address",
                |m: &Location| { &m.address },
                |m: &mut Location| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Line>>(
                "line",
                |m: &Location| { &m.line },
                |m: &mut Location| { &mut m.line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "is_folded",
                |m: &Location| { &m.is_folded },
                |m: &mut Location| { &mut m.is_folded },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Location>(
                "Location",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Location {
        static instance: ::protobuf::rt::LazyV2<Location> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Location::new)
    }
}

impl ::protobuf::Clear for Location {
    fn clear(&mut self) {
        self.id = 0;
        self.mapping_id = 0;
        self.address = 0;
        self.line.clear();
        self.is_folded = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Location {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Location {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Line {
    // message fields
    pub function_id: u64,
    pub line: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Line {
    fn default() -> &'a Line {
        <Line as ::protobuf::Message>::default_instance()
    }
}

impl Line {
    pub fn new() -> Line {
        ::std::default::Default::default()
    }

    // uint64 function_id = 1;


    pub fn get_function_id(&self) -> u64 {
        self.function_id
    }
    pub fn clear_function_id(&mut self) {
        self.function_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_function_id(&mut self, v: u64) {
        self.function_id = v;
    }

    // int64 line = 2;


    pub fn get_line(&self) -> i64 {
        self.line
    }
    pub fn clear_line(&mut self) {
        self.line = 0;
    }

    // Param is passed by value, moved
    pub fn set_line(&mut self, v: i64) {
        self.line = v;
    }
}

impl ::protobuf::Message for Line {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.function_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.line = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.function_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.function_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.line != 0 {
            my_size += ::protobuf::rt::value_size(2, self.line, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.function_id != 0 {
            os.write_uint64(1, self.function_id)?;
        }
        if self.line != 0 {
            os.write_int64(2, self.line)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Line {
        Line::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "function_id",
                |m: &Line| { &m.function_id },
                |m: &mut Line| { &mut m.function_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "line",
                |m: &Line| { &m.line },
                |m: &mut Line| { &mut m.line },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Line>(
                "Line",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Line {
        static instance: ::protobuf::rt::LazyV2<Line> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Line::new)
    }
}

impl ::protobuf::Clear for Line {
    fn clear(&mut self) {
        self.function_id = 0;
        self.line = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Line {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Line {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Function {
    // message fields
    pub id: u64,
    pub name: i64,
    pub system_name: i64,
    pub filename: i64,
    pub start_line: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Function {
    fn default() -> &'a Function {
        <Function as ::protobuf::Message>::default_instance()
    }
}

impl Function {
    pub fn new() -> Function {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // int64 name = 2;


    pub fn get_name(&self) -> i64 {
        self.name
    }
    pub fn clear_name(&mut self) {
        self.name = 0;
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: i64) {
        self.name = v;
    }

    // int64 system_name = 3;


    pub fn get_system_name(&self) -> i64 {
        self.system_name
    }
    pub fn clear_system_name(&mut self) {
        self.system_name = 0;
    }

    // Param is passed by value, moved
    pub fn set_system_name(&mut self, v: i64) {
        self.system_name = v;
    }

    // int64 filename = 4;


    pub fn get_filename(&self) -> i64 {
        self.filename
    }
    pub fn clear_filename(&mut self) {
        self.filename = 0;
    }

    // Param is passed by value, moved
    pub fn set_filename(&mut self, v: i64) {
        self.filename = v;
    }

    // int64 start_line = 5;


    pub fn get_start_line(&self) -> i64 {
        self.start_line
    }
    pub fn clear_start_line(&mut self) {
        self.start_line = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_line(&mut self, v: i64) {
        self.start_line = v;
    }
}

impl ::protobuf::Message for Function {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.name = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.system_name = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.filename = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_line = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.name != 0 {
            my_size += ::protobuf::rt::value_size(2, self.name, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.system_name != 0 {
            my_size += ::protobuf::rt::value_size(3, self.system_name, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.filename != 0 {
            my_size += ::protobuf::rt::value_size(4, self.filename, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.start_line != 0 {
            my_size += ::protobuf::rt::value_size(5, self.start_line, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if self.name != 0 {
            os.write_int64(2, self.name)?;
        }
        if self.system_name != 0 {
            os.write_int64(3, self.system_name)?;
        }
        if self.filename != 0 {
            os.write_int64(4, self.filename)?;
        }
        if self.start_line != 0 {
            os.write_int64(5, self.start_line)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Function {
        Function::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &Function| { &m.id },
                |m: &mut Function| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "name",
                |m: &Function| { &m.name },
                |m: &mut Function| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "system_name",
                |m: &Function| { &m.system_name },
                |m: &mut Function| { &mut m.system_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "filename",
                |m: &Function| { &m.filename },
                |m: &mut Function| { &mut m.filename },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "start_line",
                |m: &Function| { &m.start_line },
                |m: &mut Function| { &mut m.start_line },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Function>(
                "Function",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Function {
        static instance: ::protobuf::rt::LazyV2<Function> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Function::new)
    }
}

impl ::protobuf::Clear for Function {
    fn clear(&mut self) {
        self.id = 0;
        self.name = 0;
        self.system_name = 0;
        self.filename = 0;
        self.start_line = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Function {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Function {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rprofile.proto\x12\x12perftools.profiles\"\xf5\x04\n\x07Profile\x12>\
    \n\x0bsample_type\x18\x01\x20\x03(\x0b2\x1d.perftools.profiles.ValueType\
    R\nsampleType\x122\n\x06sample\x18\x02\x20\x03(\x0b2\x1a.perftools.profi\
    les.SampleR\x06sample\x125\n\x07mapping\x18\x03\x20\x03(\x0b2\x1b.perfto\
    ols.profiles.MappingR\x07mapping\x128\n\x08location\x18\x04\x20\x03(\x0b\
    2\x1c.perftools.profiles.LocationR\x08location\x128\n\x08function\x18\
    \x05\x20\x03(\x0b2\x1c.perftools.profiles.FunctionR\x08function\x12!\n\
    \x0cstring_table\x18\x06\x20\x03(\tR\x0bstringTable\x12\x1f\n\x0bdrop_fr\
    ames\x18\x07\x20\x01(\x03R\ndropFrames\x12\x1f\n\x0bkeep_frames\x18\x08\
    \x20\x01(\x03R\nkeepFrames\x12\x1d\n\ntime_nanos\x18\t\x20\x01(\x03R\tti\
    meNanos\x12%\n\x0eduration_nanos\x18\n\x20\x01(\x03R\rdurationNanos\x12>\
    \n\x0bperiod_type\x18\x0b\x20\x01(\x0b2\x1d.perftools.profiles.ValueType\
    R\nperiodType\x12\x16\n\x06period\x18\x0c\x20\x01(\x03R\x06period\x12\
    \x18\n\x07comment\x18\r\x20\x03(\x03R\x07comment\x12.\n\x13default_sampl\
    e_type\x18\x0e\x20\x01(\x03R\x11defaultSampleType\"3\n\tValueType\x12\
    \x12\n\x04type\x18\x01\x20\x01(\x03R\x04type\x12\x12\n\x04unit\x18\x02\
    \x20\x01(\x03R\x04unit\"p\n\x06Sample\x12\x1f\n\x0blocation_id\x18\x01\
    \x20\x03(\x04R\nlocationId\x12\x14\n\x05value\x18\x02\x20\x03(\x03R\x05v\
    alue\x12/\n\x05label\x18\x03\x20\x03(\x0b2\x19.perftools.profiles.LabelR\
    \x05label\"X\n\x05Label\x12\x10\n\x03key\x18\x01\x20\x01(\x03R\x03key\
    \x12\x10\n\x03str\x18\x02\x20\x01(\x03R\x03str\x12\x10\n\x03num\x18\x03\
    \x20\x01(\x03R\x03num\x12\x19\n\x08num_unit\x18\x04\x20\x01(\x03R\x07num\
    Unit\"\xd7\x02\n\x07Mapping\x12\x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\
    \x12!\n\x0cmemory_start\x18\x02\x20\x01(\x04R\x0bmemoryStart\x12!\n\x0cm\
    emory_limit\x18\x03\x20\x01(\x04R\x0bmemoryLimit\x12\x1f\n\x0bfile_offse\
    t\x18\x04\x20\x01(\x04R\nfileOffset\x12\x1a\n\x08filename\x18\x05\x20\
    \x01(\x03R\x08filename\x12\x19\n\x08build_id\x18\x06\x20\x01(\x03R\x07bu\
    ildId\x12#\n\rhas_functions\x18\x07\x20\x01(\x08R\x0chasFunctions\x12#\n\
    \rhas_filenames\x18\x08\x20\x01(\x08R\x0chasFilenames\x12(\n\x10has_line\
    _numbers\x18\t\x20\x01(\x08R\x0ehasLineNumbers\x12*\n\x11has_inline_fram\
    es\x18\n\x20\x01(\x08R\x0fhasInlineFrames\"\x9e\x01\n\x08Location\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12\x1d\n\nmapping_id\x18\x02\
    \x20\x01(\x04R\tmappingId\x12\x18\n\x07address\x18\x03\x20\x01(\x04R\x07\
    address\x12,\n\x04line\x18\x04\x20\x03(\x0b2\x18.perftools.profiles.Line\
    R\x04line\x12\x1b\n\tis_folded\x18\x05\x20\x01(\x08R\x08isFolded\";\n\
    \x04Line\x12\x1f\n\x0bfunction_id\x18\x01\x20\x01(\x04R\nfunctionId\x12\
    \x12\n\x04line\x18\x02\x20\x01(\x03R\x04line\"\x8a\x01\n\x08Function\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12\x12\n\x04name\x18\x02\x20\
    \x01(\x03R\x04name\x12\x1f\n\x0bsystem_name\x18\x03\x20\x01(\x03R\nsyste\
    mName\x12\x1a\n\x08filename\x18\x04\x20\x01(\x03R\x08filename\x12\x1d\n\
    \nstart_line\x18\x05\x20\x01(\x03R\tstartLineB-\n\x1dcom.google.perftool\
    s.profilesB\x0cProfileProtob\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
